buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.4.0"
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

version = mod_version
group = package_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_name + "_" + mc_version

def buildNumber = System.getenv().TRAVIS_BUILD_NUMBER
if (buildNumber != null) {
    // Adds the build number to the end of the version string if on a build server
    version += ".${buildNumber}"

    // Set the Artifactory build number to the Travis build number
    buildInfo.build.number=buildNumber
}

def projectUrl = 'https://github.com/Choonster/LockableContainers'
def artifactory_user = System.getenv().BINTRAY_USER
def artifactory_password = System.getenv().BINTRAY_PASSWORD

srcCompat = JavaVersion.VERSION_1_8
targetCompat = JavaVersion.VERSION_1_8

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    useDepAts = true

    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
}

repositories {
    maven { url = "http://dvs1.progwml6.com/files/maven" }
    maven { url = "http://mobiusstrip.eu/maven" }
}

dependencies {
    deobfProvided "mezz.jei:jei_${mc_version}:${jei_version}"
    deobfProvided "mcp.mobius.waila:Waila:${waila_version}_1.9.4"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-Xlint:unchecked')
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives javadocJar
}

// Based on https://github.com/JFrogDev/project-examples/blob/master/gradle-examples/4/gradle-example-publish-bintray-info/build.gradle
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'Lockable Containers'
                    description 'A Minecraft Forge mod that allows chests and other containers to be locked with a key code.'
                    url projectUrl
                    scm {
                        url projectUrl
                        connection projectUrl
                        developerConnection projectUrl
                    }
                    licenses {
                        license {
                            name 'The MIT License'
                            url 'https://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'Choonster'
                            name 'Choonster'
                            url 'https://github.com/Choonster'
                        }
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'oss-release-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('mavenJava')
        }
    }
}

