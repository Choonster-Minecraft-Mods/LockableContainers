buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = mod_version
group = package_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_name + "_" + mc_version

if (System.getenv().BUILD_NUMBER != null) { // Adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().BUILD_NUMBER}"
}

srcCompat = JavaVersion.VERSION_1_8
targetCompat = JavaVersion.VERSION_1_8

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    useDepAts = true

    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
}

repositories {
    maven { url = "http://dvs1.progwml6.com/files/maven" }
    maven { url = "http://mobiusstrip.eu/maven" }
}

dependencies {
    deobfProvided "mezz.jei:jei_${mc_version}:${jei_version}"
    deobfProvided "mcp.mobius.waila:Waila:${waila_version}_1.9.4"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-Xlint:unchecked')
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives javadocJar
}
